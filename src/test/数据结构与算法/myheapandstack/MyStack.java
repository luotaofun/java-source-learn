package test.数据结构与算法.myheapandstack;

/**
 * @Classname MyStack
 * @Description
## 栈（Stack）?
> - 数组和链表暴露太多接口，实现上太灵活，理解不到位可能出错，在某些特定场景，比如只能操作端和尾数据可以使用栈，比如浏览器的前进和后退功能。
> - Last in first out：比如在放盘子的时候都是从下往上一个一个放，拿的时候从上往下一个一个的拿，不能从中间抽，即后进先出
> - 一个限定仅在表尾增删的线性表，这一端被称为栈项，把另一端称为栈底
> - 把新元素放到栈顶叫进栈，把栈顶元素删除叫出栈
> - 每个线程拥有自己的私有栈。
> - 存储方法调用时的局部变量、基本类型、参数传递、方法调用过程中的`上下文`等信息,因为栈的速度比堆`快`，而且栈的数据可`共享`。
> - 局部变量如果是基本类型，直接保存值；如果是引用类型，则保存指向堆中对象的`引用`。
> - 方法执行完毕后，栈帧自动弹出，局部变量随之销毁。

## 设计一个括号匹配的功能？
> 比如给一串括号判断是否符合括号原则。

## 如何设计一个浏览器的前进和后退功能？
> 两个栈

 * @Version 1.0.0
 * @Date 2025/5/11 18:06
 * @Author LuoTao
 */
public interface MyStack<Item> {
    MyStack<Item> push(Item item); // 入栈
}
