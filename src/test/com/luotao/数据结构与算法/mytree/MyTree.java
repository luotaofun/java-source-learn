package test.com.luotao.数据结构与算法.mytree;

/**
 * @Classname MyTree
 * @Description
## 树?
> 子树：结点>1时，其余的结点分为的互不相交的集合
> 度：一个结点拥有的子树数量叫结点的度
> 树的高度：根结点的高度
> 结点的高度：结点到叶子结点的最长路径
> 结点的深度：根结点到该结点的边个数
> 结点的层数: 结点的深度+1
> 叶子：度为0的结点
> 孩子结点：结点的子树的根
> 双亲：和孩子结点对应
> 兄弟：同一个双亲结点
> 森林：N哥互不相交的树
 * @Version 1.0.0
 * @Date 2025/5/15 14:34
 * @Author LuoTao
 */
public class MyTree {
}

/**
* @Description:
## 二叉树(binary tree)?
> - 每个结点最多只有两颗子树
> - 第N层上最多有2^(n-1)个结点（1 2 4 8...），最多有2^n-1个结点数量
> - 满二叉树：除叶子结点外，每个结点都有左右两个子节点


## 为什么需要区分一个完全二叉树出来？
        A
      /   \
     B     C
   /  \   /
  D    E F
数组索引： [0] [1] [2] [3] [4] [5]
对应节点：  A   B   C   D   E   F
关系：
- A 的左孩子是 B（索引 0 → 1）
- A 的右孩子是 C（索引 0 → 2）
- B 的左孩子是 D（索引 1 → 3）
- B 的右孩子是 E（索引 1 → 4）
- C 的左孩子是 F（索引 2 → 5）

> - 完全二叉树：除最后一层外，其余层的结点个数必须达到最大，并且最后一层结点都连续靠左排列
> - 完全二叉树是满二叉树里面的一个子集
> - 数组的性能是高效的，可以用数组来存储完全二叉树。
* @Author: LuoTao
* @Date: 2025-05-15 14:58:45
**/
class BinaryTree{

}